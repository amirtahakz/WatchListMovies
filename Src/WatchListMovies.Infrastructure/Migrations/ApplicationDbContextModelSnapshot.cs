// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WatchListMovies.Infrastructure.Persistent.Ef;

#nullable disable

namespace WatchListMovies.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WatchListMovies.Domain.CastAgg.Cast", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Adult")
                        .HasColumnType("bit");

                    b.Property<long?>("ApiModelId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("Gender")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsRecommendedByAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("KnownForDepartment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovieKnownForIds")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("GenreIds");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OriginalName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("Popularity")
                        .HasColumnType("float");

                    b.Property<string>("ProfilePath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApiModelId")
                        .IsUnique()
                        .HasFilter("[ApiModelId] IS NOT NULL");

                    b.HasIndex("Gender");

                    b.HasIndex("Name");

                    b.HasIndex("OriginalName");

                    b.ToTable("Casts", "cast");
                });

            modelBuilder.Entity("WatchListMovies.Domain.CompanyAgg.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("ApiModelId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OriginCountry")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApiModelId")
                        .IsUnique()
                        .HasFilter("[ApiModelId] IS NOT NULL");

                    b.HasIndex("Name");

                    b.ToTable("Companies", "company");
                });

            modelBuilder.Entity("WatchListMovies.Domain.ContentCastAgg.ContentCast", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("CastApiModelId")
                        .HasColumnType("bigint");

                    b.Property<string>("Character")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ContentApiModelId")
                        .HasColumnType("bigint");

                    b.Property<int?>("ContentType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreditId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreditType")
                        .HasColumnType("int");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Job")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CastApiModelId");

                    b.HasIndex("ContentApiModelId");

                    b.HasIndex("ContentType");

                    b.HasIndex("CreditType");

                    b.ToTable("ContentCasts");
                });

            modelBuilder.Entity("WatchListMovies.Domain.ContentImageAgg.ContentImage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("AspectRatio")
                        .HasColumnType("float");

                    b.Property<long?>("ContentApiModelId")
                        .HasColumnType("bigint");

                    b.Property<int?>("ContentImageType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Height")
                        .HasColumnType("bigint");

                    b.Property<string>("Iso6391")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("VoteAverage")
                        .HasColumnType("float");

                    b.Property<long?>("VoteCount")
                        .HasColumnType("bigint");

                    b.Property<long?>("Width")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ContentApiModelId");

                    b.HasIndex("ContentImageType");

                    b.ToTable("ContentImages");
                });

            modelBuilder.Entity("WatchListMovies.Domain.CountryAgg.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnglishName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Iso31661")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NativeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("WatchListMovies.Domain.FavoriteAgg.Favorite", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FavoriteType")
                        .HasColumnType("int");

                    b.Property<Guid?>("ListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SubjectGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("SubjectId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("WatchListMovies.Domain.GenreAgg.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("ApiModelId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GenreType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ApiModelId");

                    b.HasIndex("GenreType");

                    b.HasIndex("Name");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("WatchListMovies.Domain.LanguageAgg.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnglishName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Iso6391")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("WatchListMovies.Domain.ListAgg.List", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<int>("ListType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Lists");
                });

            modelBuilder.Entity("WatchListMovies.Domain.MovieAgg.Movie", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Adult")
                        .HasColumnType("bit");

                    b.Property<long?>("ApiModelId")
                        .HasColumnType("bigint");

                    b.Property<string>("BackdropPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GenreIds")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("GenreIds");

                    b.Property<bool?>("IsRecommendedByAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("OriginalLanguage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalTitle")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Overview")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Popularity")
                        .HasColumnType("float");

                    b.Property<string>("PosterPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool?>("Video")
                        .HasColumnType("bit");

                    b.Property<double?>("VoteAverage")
                        .HasColumnType("float");

                    b.Property<int?>("VoteCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApiModelId")
                        .IsUnique()
                        .HasFilter("[ApiModelId] IS NOT NULL");

                    b.HasIndex("OriginalTitle");

                    b.HasIndex("ReleaseDate");

                    b.HasIndex("Title");

                    b.ToTable("Movies", "movie");
                });

            modelBuilder.Entity("WatchListMovies.Domain.TvAgg.Tv", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Adult")
                        .HasColumnType("bit");

                    b.Property<long?>("ApiModelId")
                        .HasColumnType("bigint");

                    b.Property<string>("BackdropPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FirstAirDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GenreIds")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("GenreIds");

                    b.Property<bool?>("IsRecommendedByAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OriginalLanguage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Overview")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Popularity")
                        .HasColumnType("float");

                    b.Property<string>("PosterPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("VoteAverage")
                        .HasColumnType("float");

                    b.Property<long?>("VoteCount")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ApiModelId")
                        .IsUnique()
                        .HasFilter("[ApiModelId] IS NOT NULL");

                    b.HasIndex("Name");

                    b.HasIndex("OriginalName");

                    b.ToTable("Tvs", "tv");
                });

            modelBuilder.Entity("WatchListMovies.Domain.UserAgg.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AvatarName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Family")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("Users", "user");
                });

            modelBuilder.Entity("WatchListMovies.Domain.CastAgg.Cast", b =>
                {
                    b.OwnsOne("WatchListMovies.Domain.CastAgg.CastDetail", "CastDetails", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool?>("Adult")
                                .HasColumnType("bit");

                            b1.Property<long?>("ApiModelId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Biography")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime?>("Birthday")
                                .HasColumnType("datetime2");

                            b1.Property<string>("CastAlsoKnownAss")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("CastAlsoKnownAss");

                            b1.Property<Guid?>("CastId")
                                .IsRequired()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("CreationDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("Deathday")
                                .HasColumnType("datetime2");

                            b1.Property<int?>("Gender")
                                .HasColumnType("int");

                            b1.Property<string>("Homepage")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ImdbId")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("KnownForDepartment")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PlaceOfBirth")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<double?>("Popularity")
                                .HasColumnType("float");

                            b1.Property<string>("ProfilePath")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("Id");

                            b1.HasIndex("ApiModelId")
                                .IsUnique()
                                .HasFilter("[ApiModelId] IS NOT NULL");

                            b1.HasIndex("CastId")
                                .IsUnique();

                            b1.ToTable("CastDetails", "cast");

                            b1.WithOwner()
                                .HasForeignKey("CastId");
                        });

                    b.OwnsOne("WatchListMovies.Domain.CastAgg.CastExternalId", "CastExternalId", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<long?>("ApiModelId")
                                .HasColumnType("bigint");

                            b1.Property<Guid>("CastId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("CreationDate")
                                .HasColumnType("datetime2");

                            b1.Property<string>("FacebookId")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("FreebaseId")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("FreebaseMid")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ImdbId")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("InstagramId")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("TiktokId")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<long?>("TvrageId")
                                .HasColumnType("bigint");

                            b1.Property<string>("TwitterId")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("WikidataId")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("YoutubeId")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("Id");

                            b1.HasIndex("ApiModelId");

                            b1.HasIndex("CastId")
                                .IsUnique();

                            b1.ToTable("CastExternalId", "cast");

                            b1.WithOwner()
                                .HasForeignKey("CastId");
                        });

                    b.Navigation("CastDetails");

                    b.Navigation("CastExternalId");
                });

            modelBuilder.Entity("WatchListMovies.Domain.CompanyAgg.Company", b =>
                {
                    b.OwnsOne("WatchListMovies.Domain.CompanyAgg.CompanyDetail", "CompanyDetail", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<long?>("ApiModelId")
                                .HasColumnType("bigint");

                            b1.Property<DateTime>("CreationDate")
                                .HasColumnType("datetime2");

                            b1.Property<string>("Description")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Headquarters")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Homepage")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("LogoPath")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OriginCountry")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ParentCompany")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<Guid?>("ParrentId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("Id");

                            b1.HasIndex("ApiModelId")
                                .IsUnique()
                                .HasFilter("[ApiModelId] IS NOT NULL");

                            b1.ToTable("CompanyDetails", "company");

                            b1.WithOwner()
                                .HasForeignKey("Id");
                        });

                    b.Navigation("CompanyDetail");
                });

            modelBuilder.Entity("WatchListMovies.Domain.MovieAgg.Movie", b =>
                {
                    b.OwnsOne("WatchListMovies.Domain.MovieAgg.MovieDetail", "MovieDetails", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool?>("Adult")
                                .HasColumnType("bit");

                            b1.Property<long?>("ApiModelId")
                                .HasColumnType("bigint");

                            b1.Property<string>("BackdropPath")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<long?>("Budget")
                                .HasColumnType("bigint");

                            b1.Property<string>("CompanyIds")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("CompanyIds");

                            b1.Property<string>("CountryIds")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("CountryIds");

                            b1.Property<DateTime>("CreationDate")
                                .HasColumnType("datetime2");

                            b1.Property<string>("GenreIds")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("GenreIds");

                            b1.Property<string>("Homepage")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ImdbId")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("LanguageIds")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("LanguageIds");

                            b1.Property<Guid>("MovieId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("OriginalLanguage")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OriginalTitle")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Overview")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<double?>("Popularity")
                                .HasColumnType("float");

                            b1.Property<string>("PosterPath")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime?>("ReleaseDate")
                                .HasColumnType("datetime2");

                            b1.Property<long?>("Revenue")
                                .HasColumnType("bigint");

                            b1.Property<long?>("Runtime")
                                .HasColumnType("bigint");

                            b1.Property<string>("Status")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Tagline")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Title")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<bool?>("Video")
                                .HasColumnType("bit");

                            b1.Property<double?>("VoteAverage")
                                .HasColumnType("float");

                            b1.Property<long?>("VoteCount")
                                .HasColumnType("bigint");

                            b1.HasKey("Id");

                            b1.HasIndex("ApiModelId")
                                .IsUnique()
                                .HasFilter("[ApiModelId] IS NOT NULL");

                            b1.HasIndex("MovieId")
                                .IsUnique();

                            b1.ToTable("MovieDetails", "movie");

                            b1.WithOwner()
                                .HasForeignKey("MovieId");

                            b1.OwnsMany("WatchListMovies.Domain.MovieAgg.MovieKeyYoutubeTrailer", "MovieKeyYoutubeTrailers", b2 =>
                                {
                                    b2.Property<Guid>("Id")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("ApiModelId")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<DateTime>("CreationDate")
                                        .HasColumnType("datetime2");

                                    b2.Property<string>("Iso31661")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Iso6391")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Key")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<Guid>("MovieDetailId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<bool?>("Official")
                                        .HasColumnType("bit");

                                    b2.Property<Guid>("ParrentId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<DateTime?>("PublishedAt")
                                        .HasColumnType("datetime2");

                                    b2.Property<string>("Site")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<long?>("Size")
                                        .HasColumnType("bigint");

                                    b2.Property<string>("Type")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("Id");

                                    b2.HasIndex("ApiModelId")
                                        .IsUnique()
                                        .HasFilter("[ApiModelId] IS NOT NULL");

                                    b2.HasIndex("MovieDetailId");

                                    b2.ToTable("MovieKeyYoutubeTrailers", "movie");

                                    b2.WithOwner()
                                        .HasForeignKey("MovieDetailId");
                                });

                            b1.OwnsOne("WatchListMovies.Domain.MovieAgg.ValueObjects.BelongsToCollectionValueObject", "BelongsToCollection", b2 =>
                                {
                                    b2.Property<DateTime>("CreationDate")
                                        .HasColumnType("datetime2");

                                    b2.Property<Guid?>("ParrentId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<long?>("ApiModelId")
                                        .HasColumnType("bigint");

                                    b2.Property<string>("BackdropPath")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("PosterPath")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("CreationDate", "ParrentId", "Name");

                                    b2.HasIndex("ParrentId")
                                        .IsUnique();

                                    b2.ToTable("BelongsToCollections", "movie");

                                    b2.WithOwner()
                                        .HasForeignKey("ParrentId");
                                });

                            b1.Navigation("BelongsToCollection");

                            b1.Navigation("MovieKeyYoutubeTrailers");
                        });

                    b.Navigation("MovieDetails");
                });

            modelBuilder.Entity("WatchListMovies.Domain.TvAgg.Tv", b =>
                {
                    b.OwnsOne("WatchListMovies.Domain.TvAgg.TvDetail", "TvDetail", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool?>("Adult")
                                .HasColumnType("bit");

                            b1.Property<long?>("ApiModelId")
                                .HasColumnType("bigint");

                            b1.Property<string>("BackdropPath")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("CompanyIds")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("CompanyIds");

                            b1.Property<string>("CountryIds")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("CountryIds");

                            b1.Property<DateTime>("CreationDate")
                                .HasColumnType("datetime2");

                            b1.Property<string>("FirstAirDate")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("GenreIds")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("GenreIds");

                            b1.Property<string>("Homepage")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<bool?>("InProduction")
                                .HasColumnType("bit");

                            b1.Property<string>("LanguageIds")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("LanguageIds");

                            b1.Property<string>("LastAirDate")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<long?>("NumberOfEpisodes")
                                .HasColumnType("bigint");

                            b1.Property<long?>("NumberOfSeasons")
                                .HasColumnType("bigint");

                            b1.Property<string>("OriginalLanguage")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OriginalName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Overview")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<double?>("Popularity")
                                .HasColumnType("float");

                            b1.Property<string>("PosterPath")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Status")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Tagline")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("TvEpisodeRunTimes")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("TvEpisodeRunTimes");

                            b1.Property<Guid>("TvId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Type")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<double?>("VoteAverage")
                                .HasColumnType("float");

                            b1.Property<long?>("VoteCount")
                                .HasColumnType("bigint");

                            b1.HasKey("Id");

                            b1.HasIndex("ApiModelId")
                                .IsUnique()
                                .HasFilter("[ApiModelId] IS NOT NULL");

                            b1.HasIndex("TvId")
                                .IsUnique();

                            b1.ToTable("TvDetails", "tv");

                            b1.WithOwner()
                                .HasForeignKey("TvId");

                            b1.OwnsMany("WatchListMovies.Domain.TvAgg.ValueObjects.CreatedByValueObject", "CreatedBys", b2 =>
                                {
                                    b2.Property<DateTime>("CreationDate")
                                        .HasColumnType("datetime2");

                                    b2.Property<Guid?>("ParrentId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<long?>("ApiModelId")
                                        .HasColumnType("bigint");

                                    b2.Property<int?>("Gender")
                                        .HasColumnType("int");

                                    b2.Property<string>("OriginalName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ProfilePath")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("CreationDate", "ParrentId", "Name");

                                    b2.HasIndex("ParrentId");

                                    b2.ToTable("CreatedBys", "tv");

                                    b2.WithOwner()
                                        .HasForeignKey("ParrentId");
                                });

                            b1.OwnsMany("WatchListMovies.Domain.TvAgg.ValueObjects.EpisodeValueObject", "EpisodeToAirs", b2 =>
                                {
                                    b2.Property<DateTime>("CreationDate")
                                        .HasColumnType("datetime2");

                                    b2.Property<Guid?>("ParrentId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<DateTime?>("AirDate")
                                        .HasColumnType("datetime2");

                                    b2.Property<long?>("ApiModelId")
                                        .HasColumnType("bigint");

                                    b2.Property<int>("EpisodeAirType")
                                        .HasColumnType("int");

                                    b2.Property<long?>("EpisodeNumber")
                                        .HasColumnType("bigint");

                                    b2.Property<string>("EpisodeType")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Overview")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<long?>("SeasonNumber")
                                        .HasColumnType("bigint");

                                    b2.Property<string>("StillPath")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<float?>("VoteAverage")
                                        .HasColumnType("real");

                                    b2.Property<long?>("VoteCount")
                                        .HasColumnType("bigint");

                                    b2.HasKey("CreationDate", "ParrentId", "Name");

                                    b2.HasIndex("ParrentId");

                                    b2.ToTable("EpisodeToAirs", "tv");

                                    b2.WithOwner()
                                        .HasForeignKey("ParrentId");
                                });

                            b1.OwnsMany("WatchListMovies.Domain.TvAgg.ValueObjects.NetworkValueObject", "Networks", b2 =>
                                {
                                    b2.Property<DateTime>("CreationDate")
                                        .HasColumnType("datetime2");

                                    b2.Property<Guid?>("ParrentId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<long?>("ApiModelId")
                                        .HasColumnType("bigint");

                                    b2.Property<string>("LogoPath")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OriginCountry")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("CreationDate", "ParrentId", "Name");

                                    b2.HasIndex("ParrentId");

                                    b2.ToTable("Networks", "tv");

                                    b2.WithOwner()
                                        .HasForeignKey("ParrentId");
                                });

                            b1.OwnsMany("WatchListMovies.Domain.TvAgg.ValueObjects.SeasonValueObject", "Seasons", b2 =>
                                {
                                    b2.Property<DateTime>("CreationDate")
                                        .HasColumnType("datetime2");

                                    b2.Property<Guid?>("ParrentId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<DateTime?>("AirDate")
                                        .HasColumnType("datetime2");

                                    b2.Property<long?>("ApiModelId")
                                        .HasColumnType("bigint");

                                    b2.Property<long?>("EpisodeCount")
                                        .HasColumnType("bigint");

                                    b2.Property<string>("Overview")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("PosterPath")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<long?>("SeasonNumber")
                                        .HasColumnType("bigint");

                                    b2.Property<float?>("VoteAverage")
                                        .HasColumnType("real");

                                    b2.HasKey("CreationDate", "ParrentId", "Name");

                                    b2.HasIndex("ParrentId");

                                    b2.ToTable("Seasons", "tv");

                                    b2.WithOwner()
                                        .HasForeignKey("ParrentId");
                                });

                            b1.Navigation("CreatedBys");

                            b1.Navigation("EpisodeToAirs");

                            b1.Navigation("Networks");

                            b1.Navigation("Seasons");
                        });

                    b.Navigation("TvDetail");
                });

            modelBuilder.Entity("WatchListMovies.Domain.UserAgg.User", b =>
                {
                    b.OwnsMany("WatchListMovies.Domain.UserAgg.UserToken", "Tokens", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("CreationDate")
                                .HasColumnType("datetime2");

                            b1.Property<string>("Device")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("HashJwtToken")
                                .IsRequired()
                                .HasMaxLength(250)
                                .HasColumnType("nvarchar(250)");

                            b1.Property<string>("HashRefreshToken")
                                .IsRequired()
                                .HasMaxLength(250)
                                .HasColumnType("nvarchar(250)");

                            b1.Property<DateTime>("RefreshTokenExpireDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("TokenExpireDate")
                                .HasColumnType("datetime2");

                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("Id");

                            b1.HasIndex("UserId");

                            b1.ToTable("Tokens", "user");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Tokens");
                });
#pragma warning restore 612, 618
        }
    }
}
